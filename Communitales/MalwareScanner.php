<?php

/**
 * @author      Sven Weingartner <sven.weingartner@communitales.com>
 * @copyright   Copyright (c) 2016 Communitales GmbH (http://www.communitales.com/)
 */

namespace Communitales;

/**
 * Class MalwareScanner
 */
class MalwareScanner
{

    const THRESHOLD_SUSPICIOUS = 2;

    /**
     * @var MalwareAnalyzer
     */
    private $analyzer;

    private $extraLf = false;

    private $createWhitelist = false;

    /**
     * MalwareScanner constructor.
     */
    public function __construct()
    {
        $this->analyzer = new MalwareAnalyzer();
    }

    /**
     * @param string $directory
     */
    public function scanDirectory($directory)
    {
        if (substr($directory, strlen($directory) - 1, 1) == DIRECTORY_SEPARATOR) {
            $directory = substr($directory, 0, strlen($directory) - 1);
        }

        if ($handle = opendir($directory)) {
            //$this->output(sprintf("Scanning Directory: %s", $directory), true, false);

            while (false !== ($entry = readdir($handle))) {
                if ($entry == '.' || $entry == '..') {
                    continue;
                }

                if (is_dir($directory.DIRECTORY_SEPARATOR.$entry)) {
                    $this->scanDirectory($directory.DIRECTORY_SEPARATOR.$entry);
                }

                if (strpos($entry, '.php') == strlen($entry) - 4) {
                    $this->analyzeFile($directory.DIRECTORY_SEPARATOR.$entry);
                }
            }

            closedir($handle);
        }
    }

    /**
     * Checks the file for malicious content
     *
     * @param $fileName
     */
    private function analyzeFile($fileName)
    {
        $content = file_get_contents($fileName);
        $score = $this->analyzer->analyzeContent($fileName, $content);

        if ($this->createWhitelist) {

            if ($score >= self::THRESHOLD_SUSPICIOUS) {
                $this->analyzer->getWhitelister()->addFileToWhitelist($fileName, $content);
            }
        } else {
            if ($score >= self::THRESHOLD_SUSPICIOUS) {
                $this->output(sprintf("Suspicious file: %s (Score: %d)", $fileName, $score));
            }
        }
    }

    /**
     * Outputs a line of text
     *
     * @param string $text
     * @param bool   $cr
     * @param bool   $lf
     */
    private function output($text, $cr = false, $lf = true)
    {
        if (!$lf) {
            $this->extraLf = true;
        }

        if ($lf && $this->extraLf) {
            echo "\n";
            $this->extraLf = false;
        }

        if ($cr) {
            echo "\r";
        }

        echo $text;

        if ($lf) {
            echo "\n";
        }
    }

    /**
     * @param boolean $createWhitelist
     *
     * @return MalwareScanner
     */
    public function setCreateWhitelist($createWhitelist)
    {
        $this->createWhitelist = $createWhitelist;
        if ($createWhitelist) {
            $this->analyzer->getWhitelister()->resetWhitelist();
        }

        return $this;
    }

    /**
     * @param string $filename
     */
    public function writeWhitelistToFile($filename)
    {
        $this->analyzer->getWhitelister()->writeWhitelistToFile($filename);
    }
}
