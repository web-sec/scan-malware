<?php

/**
 * @author      Sven Weingartner <sven.weingartner@communitales.com>
 * @copyright   Copyright (c) 2016 Communitales GmbH (http://www.communitales.com/)
 */

namespace Communitales;

use Config\Patterns;

/**
 * Class MalwareAnalyzer
 */
class MalwareAnalyzer
{

    const GLOBALS_THRESHOLD = 10;
    const HEXCHARS_THRESHOLD = 20;
    const WORD_LENGTH_THRESHOLD = 50;
    const LINE_LENGTH_THRESHOLD = 500;

    private $patterns = array();

    private $whitelister;

    /**
     * MalwareAnalyzer constructor.
     */
    public function __construct()
    {
        $this->patterns = new Patterns();
        $this->whitelister = new Whitelister();
    }

    /**
     * Check if the PHP content seems malicious
     *
     * @param string $fileName
     * @param string $fileContent
     *
     * @return int
     */
    public function analyzeContent($fileName, $fileContent)
    {
        $score = 0;

        if ($this->whitelister->isFileWhitelisted($fileName, $fileContent)) {
            return $score;
        }

        $score += $this->containsSuspiciousFunctions($fileContent);

        if ($this->containsLotsOfGlobals($fileContent)) {
            $score++;
        }
        if ($this->containsLotsOfHexChars($fileContent)) {
            $score++;
        }
        if ($this->containsLongWords($fileContent)) {
            $score++;
        }
        if ($this->containsLongLines($fileContent)) {
            $score++;
        }
        if ($this->containsLongSpacesOrTabs($fileContent)) {
            $score++;
        }

        return $score;
    }

    /**
     * Check if the code contains suspicious functions
     *
     * @param string $fileContent
     *
     * @return bool
     */
    private function containsSuspiciousFunctions($fileContent)
    {
        $score = 0;

        // maybe make a regex out of it like findbot.pl ?
        foreach ($this->patterns->getPatterns() as $pattern) {
            if (strpos($fileContent, $pattern) !== false) {
                $score += 2;
            }
        }

        return $score;
    }

    /**
     * Check if the code contains lots of globals
     *
     * @param string $fileContent
     *
     * @return bool
     */
    private function containsLotsOfGlobals($fileContent)
    {
        if (substr_count($fileContent, '$GLOBALS') > self::GLOBALS_THRESHOLD) {
            return true;
        }

        return false;
    }

    /**
     * Check if the code contains lots of hex chars.
     *
     * @param string $fileContent
     *
     * @return bool
     */
    private function containsLotsOfHexChars($fileContent)
    {
        if (substr_count($fileContent, '\x') > self::HEXCHARS_THRESHOLD) {
            return true;
        }

        return false;
    }

    /**
     * Check if the code contains long words without spaces.
     * These is often encoded code.
     *
     * @param string $fileContent
     *
     * @return bool
     */
    private function containsLongWords($fileContent)
    {
        $words = explode(' ', str_replace("\n", ' ', $fileContent));
        foreach ($words as $word) {
            if (strlen($word) >= self::WORD_LENGTH_THRESHOLD) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if the code contains very long lines.
     *
     * @param string $fileContent
     *
     * @return bool
     */
    private function containsLongLines($fileContent)
    {
        $lines = explode("\n", $fileContent);
        foreach ($lines as $line) {
            if (strlen($line) >= self::LINE_LENGTH_THRESHOLD) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if the code contains long spaces or tabs.
     * They are used to hide file content from simple viewers
     *
     * @param string $fileContent
     *
     * @return bool
     */
    private function containsLongSpacesOrTabs($fileContent)
    {
        // 60 Spaces
        $longSpaces = '                                                            ';

        // 15 Tabs
        $longTabs = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t";

        if (strpos($fileContent, $longSpaces) != false || strpos($fileContent, $longTabs) != false) {
            return true;
        }

        return false;
    }

    /**
     * @return Whitelister
     */
    public function getWhitelister()
    {
        return $this->whitelister;
    }

}
