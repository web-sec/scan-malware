<?php

/**
 * @author      Sven Weingartner <sven.weingartner@communitales.com>
 * @copyright   Copyright (c) 2016 Communitales GmbH (http://www.communitales.com/)
 */

namespace Communitales;

/**
 * Class Whitelister
 */
class Whitelister
{
    private $hashAlgorithm = 'sha256';

    private $whitelist = array();

    /**
     * Whitelister constructor.
     */
    public function __construct()
    {
        $this->loadWhitelists();
    }

    /**
     * Load all existing whitelists
     */
    public function loadWhitelists()
    {
        $whitelists = glob(dirname(__FILE__).'/../Config/Whitelist/*.php');
        $whitelist = array();

        foreach ($whitelists as $whitelistFile) {
            include $whitelistFile;

            $this->whitelist = array_merge_recursive($this->whitelist, $whitelist);
        }
    }

    /**
     * Reset the whitelist if we want to create a new one.
     */
    public function resetWhitelist()
    {
        $this->whitelist = array();
    }

    /**
     * Adds a file to the white list
     *
     * @param string $filename
     * @param string $content
     */
    public function addFileToWhitelist($filename, $content)
    {
        $filename = $this->getFilenameFromPath($filename);
        $hash = $this->calculateHash($content);

        if (!isset($this->whitelist[$filename])) {
            $this->whitelist[$filename] = array();
        }

        if (!in_array($hash, $this->whitelist[$filename])) {
            $this->whitelist[$filename][] = $hash;
        }
    }

    /**
     * @param string $path
     *
     * @return string
     */
    private function getFilenameFromPath($path)
    {
        return basename($path);
    }

    /**
     * Creates a hash of a file
     *
     * @param string $content
     *
     * @return string
     */
    private function calculateHash($content)
    {
        $content = str_replace("\r\n", "\n", $content);

        return hash($this->hashAlgorithm, $content);
    }

    /**
     * Check if a file is whitelisted
     *
     * @param string $filename
     * @param string $content
     *
     * @return bool
     */
    public function isFileWhitelisted($filename, $content)
    {
        $filename = $this->getFilenameFromPath($filename);
        $hash = $this->calculateHash($content);

        return isset($this->whitelist[$filename]) && in_array($hash, $this->whitelist[$filename]);
    }

    /**
     * @return array
     */
    public function getWhitelist()
    {
        return $this->whitelist;
    }

    /**
     * @param string $filename
     */
    public function writeWhitelistToFile($filename)
    {
        $filename = basename($filename);
        $targetFilename = dirname(__FILE__).'/../Config/Whitelist/'.$filename.'.php';
        ksort($this->whitelist);

        $template = file_get_contents(dirname(__FILE__).'/../Config/WhitelistTemplate.php');
        $codeWhitelist = var_export($this->whitelist, true);
        $template = str_replace('\'%whitelist%\'', $codeWhitelist, $template);

        $handle = fopen($targetFilename, 'w');
        fwrite($handle, $template);
        fclose($handle);
    }

}
